XTC ISA / Architecture


16 General Purpose Registers (r0-r15)

	* r0 always reads as zero (might not be useful here)
        
8 Special Purpose Registers

	* pc (Program Counter)
        * br (Branch Register)
        * y (higher 32-bit of 64-bit multiplication)
        * intpc (Interrupt PC)
        * trappc (Trap PC)
        * csr (CPU Status Register - arith flags and others)
        * ???
        * ???
        
1 Internal Register
	
	* imreg - Holds temporary IMmediate.
        
        
Calling Convention/Register allocation

	* r1 is procedure return
        * r2-r5 are parameters, other parameters/varargs are in stack
        * r6-r10 are callee-save registers
        * r11-r13 are scratch registers
        * r14 is frame pointer (or callee-save)
        * r15 is stack pointer
        

Instruction formats


| 15| 14| 13| 12| 11| 10| 09| 08| 07| 06| 05| 04| 03| 02| 01| 00|
|---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---|
|     OPCODE    |              12-BIT IMMEDIATE                 |  F0
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|     OPCODE    |         8-BIT IMMEDIATE       |     DSTREG    |  F1
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|             OPCODE            |    SRCREG     |     DSTREG    |  F2
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|             OPCODE            | X |   SPREG   |     DSTREG    |  F3
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|             OPCODE            |    SRCREG     | X |   SPREG   |  F4
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+



F0 Instructions

 IMM <immediate>

   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   | 1   0   0   0 |              12-BIT IMMEDIATE                 | 
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
 
   Load 12-Bit immediate into imreg register.
   If previous instruction was not an IMM, then load 12-bit value
   and sign-extend it. If it was, shift previous imreg value by 12, 
   and append the new IMM value.

   This instruction disables interrupts until an instruction which 
   does not have an immediate value as operand appears on the stream.
   
F1 Instructions

 LIMR <immediate>, <gpr>

   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   | 1   1   1   0 |         8-BIT IMMEDIATE       |     DSTREG    | 
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

   Load 8-bit immediate (extended by imreg) into destination register R.

 ADDI <immediate>, <gpr>

   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   | 0   1   1   0 |         8-BIT IMMEDIATE       |     DSTREG    | 
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

   Add the 8-bit immediate (extended by imreg) to destination register R.

 CMPI <immediate>, <gpr>

   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   | 0   1   1   1 |         8-BIT IMMEDIATE       |     DSTREG    | 
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

   Compare the destination register R with the 8-bit immediate 
   (extended by imreg).
   

Quick Opcode List

+---------+-------------+-------------------------------------------------------+
| imm     | imm12       | Load immediate into temporary imreg register          |
| limr    | imm8, rD    | Load immediate into register rD                       |
| add     | rS, rD      | Add rS and rD, store to rD                            |
| addc    | rS, rD      | Add (with carry) rS and rD, store to rD               |
| sub     | rS, rD      | Subtract rS from rD, store to rD                      |
| and     | rS, rD      | Logical AND rS and rD, store to rD                    |
| or      | rS, rD      | Logical OR rS and rD, store to rD                     |
| xor     | rS, rD      | Logical XOR rS and rD, store to rD                    |
| copy    | rS, rD      | Copy contents of rS into rD                     	|
| stw     | rS, rP      | Store rS (32b) into memory address rP     		|
| st+w    | rS, rP      | ++rP, Store rS into memory address rP     		|
| st-w    | rS, rP      | --rP, Store rS into memory address rP     |
| stw+    | rS, rP      | Store rS (32b) into memory address rP, rP++     |
| stw-    | rS, rP      | Store rS (32b) into memory address rP, rP--     |
| stb     | rS, rP      | Store rS (8b) into memory address rP 
| stb+    | rS, rP      | Store rS (8b) into memory address rP, rP++
| stb-    | rS, rP      | Store rS (8b) into memory address rP, rP--
| sts     | rS, rP      | Store rS (16b) into memory address rP 
| sts+    | rS, rP      | Store rS (16b) into memory address rP, rP++
| sts-    | rS, rP      | Store rS (16b) into memory address rP, rP--
| stiw    | rS, rP      | Store rS (32b) into memory address (rP+imreg)
| stib    | rS, rP      | Store rS (8b) into memory address (rP+imreg)
| stis    | rS, rP      | Store rS (16b) into memory address (rP+imreg)
| ldw     | rS, rP      | Load memory address rP into rS (32b)    
| ld+w    | rS, rP      | ++rP, Load memory address rP into rS (32b)
| ld-w    | rS, rP      | --rP, Load memory address rP into rS (32b)
| ldw+    | rS, rP      | Load memory address rP into rS (32b), rP++
| ldw-    | rS, rP      | Load memory address rP into rS (32b), rP--
| ldb     | rS, rP      | Load memory address rP into rS (zext8b)    
| ldb+    | rS, rP      | Load memory address rP into rS (zext8b), rP++
| ldb-    | rS, rP      | Load memory address rP into rS (zext8b), rP--
| lds     | rS, rP      | Load memory address rP into rS (zext16b)    
| lds+    | rS, rP      | Load memory address rP into rS (zext16b), rP++
| lds-    | rS, rP      | Load memory address rP into rS (zext16b), rP--
| addi    | imm8, rD    | Add immediate to register rD
| cmpi    | imm8, rS    | Compare rS to immediate 
| bri	 *| imm8        | Branch indirect (pcrel) to immediate
| brie    | imm8        | Branch indirect (pcrel) if equal
| brine   | imm8        | Branch indirect (pcrel) if not equal
| brig    | imm8        | Branch indirect (pcrel) if greater
| brige   | imm8        | Branch indirect (pcrel) if greater or equal
| bril    | imm8        | Branch indirect (pcrel) if lower
| brile   | imm8        | Branch indirect (pcrel) if lower or equal
| calli	  | imm8, rS    | Call indirect (pcrel) subroutine at (rS + immediate)
| call 	  | imm8, rS    | Call absolute subroutine at [ rS + immediate ]
| ret     |             | Return from subroutine (branch to br register)
| lsr	  | srS, rD     | Load special register srS into destination reg. rD 
| ssr	  | srD, rS     | Store into special register srD value in reg. rS 
